@using CookLook.Models;
@using CookLook.Services;
@page "/"
@inject IRecipeSearchService recipeSearchService;

<h1>Search for a recipe</h1>

@if (recipes == null)
{
    <p><em>Waiting for your delicious input...</em></p>
}
else
{
    <table class="table">
        <tbody>
            @foreach (var hit in recipes.Hits)
            {
            <tr style="background-color:#add8e6;border-color:#41B3A3;border:solid;">
                <td>
                    <h3>@hit.Recipe.Label</h3>
                    <div>From <a href="@hit.Recipe.Url" target="_blank">@hit.Recipe.Source</a></div>
                    <div>Serves: @hit.Recipe.Yield</div>
                    <div>
                        Ingredients:  <br>
                        @foreach (var ingredient in hit.Recipe.Ingredients)
                        {
                            @ingredient.Text
                            <br>
                        }
                    </div>
                    <div style="font-size:10px;display: inline-block;vertical-align:bottom;">
                        @foreach (var label in hit.Recipe.HealthLabels)
                        {
                            @label
                            <span>&nbsp</span>
                        }
                    </div>
                </td>
                <td><img src="@hit.Recipe.Image"></td>
                
            </tr>
            }
        </tbody>
    </table>
}
<input type="text" @bind-value="@searchTerm" />
<input type="button" value="Search" @onclick="@SearchRecipes" />





@code {


    private string searchTerm;
    private RecipeList recipes;

    async Task SearchRecipes()
    {
        recipes = await recipeSearchService.SearchRecipesAsync(searchTerm);
    }
}